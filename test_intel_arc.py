#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Intel Arc iGPU
"""

import torch
import os
import sys

def test_xpu_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Intel XPU"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Intel XPU...")
    
    if not hasattr(torch, 'xpu'):
        print("‚ùå PyTorch –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç XPU")
        return False
    
    if not torch.xpu.is_available():
        print("‚ùå Intel XPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    device_count = torch.xpu.device_count()
    print(f"‚úÖ Intel XPU –¥–æ—Å—Ç—É–ø–µ–Ω, —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {device_count}")
    
    for i in range(device_count):
        device_name = torch.xpu.get_device_name(i)
        memory_info = torch.xpu.get_device_properties(i)
        print(f"  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {i}: {device_name}")
        print(f"  –ü–∞–º—è—Ç—å: {memory_info.total_memory / 1024**3:.1f} GB")
    
    return True

def test_ipex_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Intel Extension for PyTorch"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Intel Extension for PyTorch...")
    
    try:
        import intel_extension_for_pytorch as ipex
        print("‚úÖ Intel Extension for PyTorch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"  –í–µ—Ä—Å–∏—è: {ipex.__version__}")
        return True
    except ImportError as e:
        print(f"‚ùå Intel Extension for PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return False

def test_model_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ Intel Arc"""
    print("\nüîç –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏...")
    
    try:
        from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–ª–æ–∫–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏
        torch.xpu.set_allocator(torch.xpu.XPUCachingAllocator)
        torch.xpu.empty_cache()
        
        # 4-–±–∏—Ç–Ω–∞—è –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è 2 –ì–ë VRAM
        bnb_config = BitsAndBytesConfig(
            load_in_4bit=True,
            bnb_4bit_quant_type="nf4",
            bnb_4bit_compute_dtype=torch.bfloat16,
            bnb_4bit_use_double_quant=True,
            cpu_embedding=True  # –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ VRAM
        )
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–≥–∫–æ–π –º–æ–¥–µ–ª–∏
        model_id = "microsoft/phi-2"
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: {model_id}")
        
        tokenizer = AutoTokenizer.from_pretrained(model_id)
        model = AutoModelForCausalLM.from_pretrained(
            model_id,
            quantization_config=bnb_config,
            max_memory={"xpu": "1.8GB", "cpu": "8GB"},
            torch_dtype=torch.bfloat16,
            trust_remote_code=False,
            low_cpu_mem_usage=True
        )
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ IPEX –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        import intel_extension_for_pytorch as ipex
        model = ipex.llm.optimize(
            model,
            dtype=torch.bfloat16,
            inplace=True,
            auto_cast="matmul",
            graph_mode=True,
            weights_prepack=True
        )
        
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ Intel Arc")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        prompt = "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ 4-–±–∏—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π?"
        inputs = tokenizer(prompt, return_tensors="pt").to("xpu")
        
        with torch.no_grad():
            outputs = model.generate(**inputs, max_new_tokens=50)
        
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {response[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Intel Arc iGPU –¥–ª—è LFP-TGbot-LLM-RAG")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    env_vars = [
        "SYCL_CACHE_PERSISTENT",
        "ENABLE_LP64", 
        "SYCL_DEVICE_FILTER",
        "ONEAPI_DEVICE_SELECTOR",
        "OMP_NUM_THREADS",
        "KMP_BLOCKTIME"
    ]
    
    for var in env_vars:
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {var}={value}")
        else:
            print(f"  ‚ö†Ô∏è  {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –¢–µ—Å—Ç—ã
    tests = [
        test_xpu_availability,
        test_ipex_installation,
        test_model_loading
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    test_names = ["XPU –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", "IPEX —É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"]
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {i+1}. {name}: {status}")
    
    if all(results):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Intel Arc –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ start_optimized.ps1 –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
        print("  - –ú–æ–¥–µ–ª—å microsoft/phi-2 –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è 2 –ì–ë VRAM")
        print("  - –û–∂–∏–¥–∞–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 8-12 —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Intel Arc –¥—Ä–∞–π–≤–µ—Ä–æ–≤")
        print("  - –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: setup_env.ps1")
        print("  - –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main() 