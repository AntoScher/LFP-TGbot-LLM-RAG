#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
"""

import os
import sys
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    load_dotenv()
    
    required_vars = [
        "TELEGRAM_TOKEN",
        "HUGGINGFACEHUB_API_TOKEN"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        import telegram
        logger.info("‚úÖ python-telegram-bot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ python-telegram-bot: {e}")
        return False
    
    try:
        import transformers
        logger.info("‚úÖ transformers –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ transformers: {e}")
        return False
    
    try:
        import torch
        logger.info(f"‚úÖ PyTorch –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä—Å–∏—è: {torch.__version__})")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PyTorch: {e}")
        return False
    
    try:
        import langchain
        logger.info(f"‚úÖ LangChain –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä—Å–∏—è: {langchain.__version__})")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ LangChain: {e}")
        return False
    
    try:
        import chromadb
        logger.info(f"‚úÖ ChromaDB –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä—Å–∏—è: {chromadb.__version__})")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ChromaDB: {e}")
        return False
    
    return True

def test_flask_app():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        from flask_app import create_app, db
        app = create_app()
        
        with app.app_context():
            db.create_all()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        logger.info("‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def test_embeddings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    
    try:
        from embeddings import init_vector_store
        logger.info("‚úÖ –ú–æ–¥—É–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        return False

def test_chains():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è —Ü–µ–ø–µ–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è —Ü–µ–ø–µ–π...")
    
    try:
        from chains import init_qa_chain, load_system_prompt
        system_prompt = load_system_prompt()
        logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è —Ü–µ–ø–µ–π: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞...")
    
    tests = [
        test_environment,
        test_imports,
        test_flask_app,
        test_embeddings,
        test_chains
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
    
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        return True
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 