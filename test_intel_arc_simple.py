#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç Intel Arc iGPU –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
"""

import torch
import os
import sys

def test_basic_xpu():
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Intel XPU"""
    print("üîç –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Intel XPU...")
    
    if not hasattr(torch, 'xpu'):
        print("‚ùå PyTorch –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç XPU")
        return False
    
    if not torch.xpu.is_available():
        print("‚ùå Intel XPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    device_count = torch.xpu.device_count()
    print(f"‚úÖ Intel XPU –¥–æ—Å—Ç—É–ø–µ–Ω, —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {device_count}")
    
    for i in range(device_count):
        device_name = torch.xpu.get_device_name(i)
        memory_info = torch.xpu.get_device_properties(i)
        print(f"  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {i}: {device_name}")
        print(f"  –ü–∞–º—è—Ç—å: {memory_info.total_memory / 1024**3:.1f} GB")
    
    return True

def test_ipex_import():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Intel Extension for PyTorch"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Intel Extension for PyTorch...")
    
    try:
        import intel_extension_for_pytorch as ipex
        print("‚úÖ Intel Extension for PyTorch –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print(f"  –í–µ—Ä—Å–∏—è: {ipex.__version__}")
        return True
    except ImportError as e:
        print(f"‚ùå Intel Extension for PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return False

def test_simple_tensor_ops():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–µ–Ω–∑–æ—Ä–∞–º–∏ –Ω–∞ XPU"""
    print("\nüîç –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–µ–Ω–∑–æ—Ä–∞–º–∏...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–∞ –Ω–∞ XPU
        x = torch.randn(100, 100).to("xpu")
        y = torch.randn(100, 100).to("xpu")
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        z = torch.matmul(x, y)
        w = torch.relu(z)
        
        print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–Ω–∑–æ—Ä–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {w.shape}, —Ç–∏–ø: {w.dtype}")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        torch.xpu.empty_cache()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–µ–Ω–∑–æ—Ä–∞–º–∏: {e}")
        return False

def test_environment_vars():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_vars = [
        "SYCL_CACHE_PERSISTENT",
        "ENABLE_LP64", 
        "SYCL_DEVICE_FILTER",
        "ONEAPI_DEVICE_SELECTOR",
        "OMP_NUM_THREADS",
        "KMP_BLOCKTIME"
    ]
    
    missing_vars = []
    for var in env_vars:
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {var}={value}")
        else:
            print(f"  ‚ö†Ô∏è  {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"  üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        return False
    else:
        print("  ‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ Intel Arc iGPU")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—ã
    tests = [
        ("XPU –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", test_basic_xpu),
        ("IPEX –∏–º–ø–æ—Ä—Ç", test_ipex_import),
        ("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–Ω–∑–æ—Ä–∞–º–∏", test_simple_tensor_ops),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment_vars)
    ]
    
    results = []
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {name}: {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê:")
    
    passed = 0
    for i, (name, result) in enumerate(results):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {i+1}. {name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
    
    if passed == len(results):
        print("\nüéâ Intel Arc –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üí° –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: python test_intel_arc.py")
    elif passed >= 2:
        print("\n‚ö†Ô∏è  Intel Arc —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    else:
        print("\n‚ùå Intel Arc –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üí° –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: .\setup_env.ps1")

if __name__ == "__main__":
    main() 