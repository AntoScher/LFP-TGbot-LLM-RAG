#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram API
"""

import os
import sys
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    load_dotenv()
    
    required_vars = [
        "TELEGRAM_TOKEN",
        "HUGGINGFACEHUB_API_TOKEN"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

def test_flask_app():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        from flask_app import create_app, db
        app = create_app()
        
        with app.app_context():
            db.create_all()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        print("‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def test_embeddings_module():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    
    try:
        from embeddings import init_vector_store
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        retriever = init_vector_store()
        print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã)
        try:
            results = retriever.get_relevant_documents("—Ç–µ—Å—Ç")
            print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results)}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤): {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        return False

def test_chains_module():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è —Ü–µ–ø–æ—á–µ–∫"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è —Ü–µ–ø–æ—á–µ–∫...")
    
    try:
        from chains import init_llm_pipeline, load_system_prompt
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        system_prompt = load_system_prompt()
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏)
        print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ (–∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è)")
        print("   –î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python test_intel_arc.py")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è —Ü–µ–ø–æ—á–µ–∫: {e}")
        return False

def test_knowledge_base():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
    
    knowledge_dir = "knowledge_base"
    if not os.path.exists(knowledge_dir):
        print("‚ùå –ü–∞–ø–∫–∞ knowledge_base –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    files = os.listdir(knowledge_dir)
    if not files:
        print("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {len(files)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    system_prompt_file = os.path.join(knowledge_dir, "system_prompt.txt")
    if os.path.exists(system_prompt_file):
        with open(system_prompt_file, 'r', encoding='utf-8') as f:
            content = f.read()
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        print("‚ö†Ô∏è  –§–∞–π–ª system_prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    modules = [
        ("telegram", "python-telegram-bot"),
        ("transformers", "transformers"),
        ("torch", "PyTorch"),
        ("langchain", "LangChain"),
        ("chromadb", "ChromaDB"),
        ("flask", "Flask")
    ]
    
    failed_imports = []
    for module_name, display_name in modules:
        try:
            __import__(module_name)
            print(f"‚úÖ {display_name}")
        except ImportError as e:
            print(f"‚ùå {display_name}: {e}")
            failed_imports.append(display_name)
    
    if failed_imports:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º: {', '.join(failed_imports)}")
        return False
    
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
    return True

def test_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        "bot.py",
        "chains.py",
        "embeddings.py",
        "requirements.txt",
        "start_bot.ps1"
    ]
    
    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file}")
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ë–û–¢–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—ã
    tests = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment_variables),
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", test_knowledge_base),
        ("Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", test_flask_app),
        ("–ú–æ–¥—É–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", test_embeddings_module),
        ("–ú–æ–¥—É–ª—å —Ü–µ–ø–æ—á–µ–∫", test_chains_module)
    ]
    
    results = []
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {name}: {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
    
    passed = 0
    for i, (name, result) in enumerate(results):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {i+1}. {name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
    
    if passed == len(results):
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print("üí° –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞: .\start_optimized.ps1 bot.py")
    elif passed >= len(results) - 1:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç")
    else:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("üí° –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: .\setup_env.ps1")

if __name__ == "__main__":
    main() 